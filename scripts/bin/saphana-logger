#!/bin/bash
umask 022

#------------------------------------------------------------------
# SAP HANA Logger
#------------------------------------------------------------------
# (C) Copyright SAP 2017
#
# Library Functions
# Script name: "saphana-logger"
#------------------------------------------------------------------
# return if saphana-logger already loaded
[[ -n "${HANA_LOGGER_VERSION:-}" ]] && return 0

HANA_LOGGER_VERSION='0.0.1'

#exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

# notify/silent=0 (always), error=1, warn=2, info=3, CHK_verbose=4, debug=5, trace=6
logNotify() {		logger 0 "[N]"	"$1"; } # Always prints
logError() {		logger 1 "[E]"	"$1"; }
logWarn() {			logger 2 "[W]"	"$1"; }
logInfo() {			logger 3 "[I]"	"$1"; }
logDebug() {		logger 5 "[D]"	"$1"; }
logTrace() {		logger 6 "[T]"	"$1"; }

logger() {
	
	local loglevel=$1
	shift 1

	if [[ ${LOG_VERBOSE_LVL} -ge ${loglevel} ]]; then

		local logleveltag="$1"
		shift 1
		
		local -r  datestring=$(date +'%H:%M:%S.%3N')
		local -ir prefix_length=$((13+11))	#len("00:04:32.001")+1 && len("[C] <ERROR>")
		local -ri content_width=$((COLUMNS-prefix_length-1))

		# Expand escaped characters, wrap at COLUMNS chars, indent wrapped lines
		#printf "%-24s %s\n" "${datestring} ${logleveltag}" "$*" | fold -w ${COLUMNS} | sed '2~1s/^/                        /' #>&3
		if [[ -t 1 ]]; then #FD1 = stdout
			local line
			printf "%s\n" "$*" | fold -w ${content_width} | ( read -r line ; printf "%-${prefix_length}s %s\n" "${datestring} ${logleveltag}" "${line}" ; while read -r line ; do printf "%-${prefix_length}s %s\n" " " "${line}" ; done )
		else
			printf "%-${prefix_length}s %s\n" "${datestring} ${logleveltag}" "$*"
		fi
	fi
}


#ToDo: remove/revise use_colored_output stuff
use_colored_output() {
	return 1
}

logCheckError() {

	if use_colored_output; then
		logger 1 "[C]" "${warn}<ERROR>${norm}"	"$@"
	else
		logger 1 "[C] <ERROR>" "$@"
	fi
}

logCheckWarning() {

	if use_colored_output; then
		logger 2 "[C]" "${attn}${blb}<WARN>${norm}"	"$@"
	else
		logger 2 "[C] <WARN>" "$@"
	fi
}

logCheckOk() {

	if use_colored_output; then
		print_folded "${done}<OK>${norm}"	"$@"
	else
		logger 3 "[C] <OK>" "$@"
	fi
}

logCheckInfo() {

	if use_colored_output; then
		print_folded "${done}<INFO>${norm}"	"$@"
	else
		logger 4 "[C] <INFO>" "$@"
	fi
}

logCheckSkipped() {

	if use_colored_output; then
		print_folded "${done}<SKIP>${norm}"	"$@"
	else
		logger 4 "[C] <SKIP>" "$@"
	fi
}


#============================================================
# LIB MAIN - initialization
#============================================================
_lib_logger_main() {

	COLUMNS=80 # required before 1st logger usage

	logTrace "<${BASH_SOURCE[0]}:${FUNCNAME[*]}>"

	# ToDo: -t 1 stdout? 
	#  if [[ -t 1 && -n "$TERM" && "$TERM" != "dumb" ]]; then
    if [[ -n "$TERM" && "$TERM" != "dumb" ]]; then
        COLUMNS=$(tput cols)		
    fi

}

# Variables to be used by other
declare -i LOG_VERBOSE_LVL=3 #notify/silent=0 (always), error=1, warn=2, info=3, CHK_verbose=4, debug=5, trace=6

# ToDo: declare -ix ?? - logging should also work for pipes (grep or less)
declare -i COLUMNS
_lib_logger_main