#!/usr/bin/env bash

function check_1310_cpu_powersavings_ibmpower {

    logTrace "<${BASH_SOURCE[0]}:${FUNCNAME[*]}>"

    local -i _retval=99

    # MODIFICATION SECTION>>
    local -r sapnote='#2055470'
    # MODIFICATION SECTION<<

    #2055470 - HANA on POWER Planning and Installation Specifics - Central Note
    ## HWCCT + IBM Documentation "HANA operations guide"
    #2684254 - SAP HANA DB: Recommended OS settings for SLES 15 / SLES for SAP Applications 15
    #2777782 - SAP HANA DB: Recommended OS Settings for RHEL 8

    # PRECONDITIONS
    if ! LIB_FUNC_IS_IBMPOWER ; then

        logCheckSkipped 'Not running on IBM Power. Skipping' "<${FUNCNAME[0]}>"
        _retval=3

    elif [[ -z ${LIB_PLATF_POWER_POWERMODE:-} ]]; then

        logCheckError "Power Savings Mode NOT known (SAP Note ${sapnote:-}) (is: Unknown, should be: None, PerfMode)"
        _retval=2

    fi

    #CHECK
    if [[ ${_retval} -eq 99 ]]; then

        # The power mode result is defined as
        # XXXX XXXX XXXX XXXX
        # XXXX                   : System Power Mode
        #                XXXX    : Partition Power Mode
        # The mode is the first 4 bytes of the value reported in the lparcfg file.

        #e.g. 0002000000020002
        local pwr_system_mode
        pwr_system_mode="${LIB_PLATF_POWER_POWERMODE:0:4}"
        local pwr_partition_mode
        pwr_partition_mode="${LIB_PLATF_POWER_POWERMODE: -4}"

        # P7,P8                                             P9,P10
        # 0x0001: "Dynamic, Favor Performance"              0x0001: "Maximum Performance"
        # 0x0002: "None"                                    0x0002: "None"
        # 0x0003: "Static"                                  0x0003: "Static"
        # 0x00ff: "Dynamic, Favor Power"                    0x0004: "Dynamic Performance"
        # default: "Unknown"

        local pwr_system_txt
        LIB_FUNC_TRANSFORM_POWER_POWERMODE "${pwr_system_mode}"
        pwr_system_txt="${RETURN_POWER_POWERMODE}"

        logDebug "<${BASH_SOURCE[0]}:${FUNCNAME[0]}> # PowerSystemMode : ${pwr_system_mode:-}; PowerSystemText : ${pwr_system_txt:-}; PowerPartMode : ${pwr_partition_mode:-}}"


        if [[ "${pwr_system_mode}" != "${pwr_partition_mode}" ]]; then

            local pwr_partition_txt
            LIB_FUNC_TRANSFORM_POWER_POWERMODE "${pwr_partition_mode}"
            pwr_partition_txt="${RETURN_POWER_POWERMODE}"

            logCheckInfo "Power Savings Mode different for System and Partition. (System: ${pwr_system_txt:-}, Partition: ${pwr_partition_txt:-})"

        fi

        local -r _lib_platf_cpu=${LIB_PLATF_CPU%%[[:space:]]*}

        if [[ "${_lib_platf_cpu:-}" =~ POWER(10|9) ]]; then

            if [[ "${pwr_system_mode}" =~ ^(0001|0002|0004)$ ]];then

                logCheckOk "Power Savings Mode set as recommended (SAP Note ${sapnote:-}) (is: ${pwr_system_txt})"
                _retval=0

            else

                logCheckError "Power Savings Mode NOT set as recommended (SAP Note ${sapnote:-}) (is: ${pwr_system_txt}, should be: None, *Perf mode)"
                _retval=2

            fi

        elif [[ "${_lib_platf_cpu:-}" =~ POWER8 ]]; then

            if [[ "${pwr_system_mode}" =~ ^(0001|0002)$ ]]; then

                logCheckOk "Power Savings Mode set as recommended (SAP Note ${sapnote:-}) (is: ${pwr_system_txt})"
                _retval=0

            else

                logCheckError "Power Savings Mode NOT set as recommended (SAP Note ${sapnote:-}) (is: ${pwr_system_txt}, should be: None, *Perf mode)"
                _retval=2

            fi

        else

            if [[ "${pwr_system_mode}" == '0002' ]]; then

                logCheckOk "Power Savings Mode set as recommended (SAP Note ${sapnote:-}) (is: None)"
                _retval=0

            else

                logCheckError "Power Savings Mode NOT set as recommended (SAP Note ${sapnote:-}) (is: ${pwr_system_txt}, should be: None)"
                _retval=2

            fi

        fi

    fi

    logDebug "<${BASH_SOURCE[0]}:${FUNCNAME[0]}> # RC=${_retval}"
    return ${_retval}

}
