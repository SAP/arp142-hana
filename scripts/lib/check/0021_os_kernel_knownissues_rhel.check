#!/usr/bin/env bash

function check_0021_os_kernel_knownissues_rhel {

    logTrace "<${BASH_SOURCE[0]}:${FUNCNAME[*]}>"

    local -i _retval=99

    # MODIFICATION SECTION>>
    # array 'release' 'lower boundary' 'upper boundary' 'SAP Note'
    local -a _rhel_all=(\
                        '6.10'  '2.6.32-754.15.3.el6'       '2.6.32-754.22.0.el6'   '#2812427' \
                        '7.6'   '3.10.0-957.21.3.el7'       '3.10.0-957.35.0.el7'   '#2812427' \
                        '8.0'   '4.18.0-80.el8'             '4.18.0-80.15.0.el8'    '#2812427' \
                        '8.1'   '4.18.0-147.el8'            '4.18.0-147.8.0.el8'    '#RHSA-2020:1372' \
                        )

    local -ar _rhel_ibmpower=(\
                        '8.4'   '4.18.0-305.el8'            '4.18.0-305.999.el8'    '#3159746' \
                        '8.2'   '4.18.0-193.el8'            '4.18.0-193.999.el8'    '#3159746' \
                        '8.1'   '4.18.0-147.el8'            '4.18.0-147.999.el8'    '#3159746' \
                        '8.0'   '4.18.0-80.el8'             '4.18.0-80.999.el8'     '#3159746' \
                        )
    # MODIFICATION SECTION<<

    #2812427 - Timeout or connection failure in SAP process after Linux kernel update
    #RHSA-2020:1372 - [HPE 8.0 BUG] System crash when reading /sys/block//mq/0/cpu_list file (BZ#1797960)
    #3159746 - Hana Revision 6x crashes on Linux kernel 4.12 or 4.18 on IBM Power platform

    # PRECONDITIONS
    if ! LIB_FUNC_IS_RHEL; then

        logCheckSkipped 'Linux distribution is not RHEL. Skipping' "<${FUNCNAME[0]}>"
        _retval=3

    elif LIB_FUNC_IS_IBMPOWER; then

        _rhel_all+=("${_rhel_ibmpower[@]}")

    fi

    #CHECK
    if [[ ${_retval} -eq 99 ]]; then

        local _rhel_release
        local _kernel_lower
        local _kernel_higher
        local kernelversion

        LIB_FUNC_NORMALIZE_KERNEL "${OS_LEVEL}"
        kernelversion="${LIB_FUNC_NORMALIZE_KERNEL_RETURN}"

        # i+=4 --> every 4th item
        for ((i=0; i < ${#_rhel_all[@]}; i+=4)); do

            logTrace "<${FUNCNAME[0]}> # ${_rhel_all[$i]}>"

            _rhel_release="${_rhel_all[$i]}"

            [[ "${OS_VERSION}" != "${_rhel_release}"* ]] && continue #handle kernel with subversions correctly

            _kernel_lower="${_rhel_all[$i+1]}"
            _kernel_higher="${_rhel_all[$i+2]}"
            _sapnote="${_rhel_all[$i+3]}"

            LIB_FUNC_NORMALIZE_KERNEL "${_kernel_higher}"
            _kernel_higher="${LIB_FUNC_NORMALIZE_KERNEL_RETURN}"

            # returns 0 if equal, 1 if first is higher, 2 if second is higher
            LIB_FUNC_COMPARE_VERSIONS "${kernelversion}" "${_kernel_higher}"
            if [[ $? -ne 1 ]]; then

                #kernel is NOT higher than blacklisted high boundary - check lower value if in blacklist range

                LIB_FUNC_NORMALIZE_KERNEL "${_kernel_lower}"
                _kernel_lower="${LIB_FUNC_NORMALIZE_KERNEL_RETURN}"

                LIB_FUNC_COMPARE_VERSIONS "${kernelversion}" "${_kernel_lower}"
                if [[ $? -le 1 ]]; then

                    logCheckError "Linux kernel has known serious issues and should be avoided (SAP Note ${_sapnote:-}) (is: ${OS_LEVEL}, should be > ${_kernel_higher}.*)"
                    _retval=2

                fi

            fi

        done

        if [[ ${_retval} -eq 99 ]]; then

            logCheckOk "Linux kernel has no known serious issues (is: ${OS_LEVEL})"
            _retval=0

        fi

    fi

    logDebug "<${BASH_SOURCE[0]}:${FUNCNAME[0]}> # RC=${_retval}"
    return ${_retval}

}
