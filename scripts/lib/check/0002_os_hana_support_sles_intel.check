#!/usr/bin/env bash

function check_0002_os_hana_support_sles_intel {

    logTrace "<${BASH_SOURCE[0]}:${FUNCNAME[*]}>"

    local -i _retval=99

    # https://www.sap.com/dmc/exp/2014-09-02-hana-hardware/enEN/#/solutions?filters=iaas
    # https://cloud.google.com/solutions/sap/docs/certifications-sap-hana#hana-cert-table-oss

    # MODIFICATION SECTION>>

    #                                           - = not supported; minor release = supported
    # array             'Platform'              '012345' (Minor Release)
    local -ar _sles_12=(\
                        'Microsoft Azure'       '-----5'   \
                        'Amazon EC2'            '-----5'   \
                        'IBM Cloud'             '-----5'   \
                        'Google GCP'            '-----5'   \
                        'Alibaba Cloud ECS'     '-----5'   \
                        'Huawei Cloud'          '-----5'   \
                        ''                      '-----5'   \          #all others, e.g. TDI, Bare-Metal
                        )

    # array             'Platform'              '0123456' (Minor Release)
    local -ar _sles_15=(\
                        'Microsoft Azure'       '-123456'   \
                        'Amazon EC2'            '-123456'   \
                        'IBM Cloud'             '-123456'   \
                        'Google GCP'            '-123456'   \
                        'Alibaba Cloud ECS'     '-12----'   \
                        'Huawei Cloud'          '-12345-'   \
                        ''                      '-123456'   \          #all others, e.g. TDI, Bare-Metal
                        )

    local -r sapnote='#2235581'
    # MODIFICATION SECTION<<

    #2235581 - SAP HANA: Supported Operating Systems
    #936887 - End of maintenance for Linux distributions

    # PRECONDITIONS
    if ! LIB_FUNC_IS_INTEL ; then

        logCheckSkipped 'Not running on Intel CPU. Skipping' "<${FUNCNAME[0]}>"
        _retval=3

    elif ! LIB_FUNC_IS_SLES; then

        logCheckSkipped 'Linux distribution is not SLES. Skipping' "<${FUNCNAME[0]}>"
        _retval=3

    else

        case "${OS_VERSION}" in

        12.5 )  : ;;
        15.* )  : ;;

        *)
            logCheckError "SLES version is NOT supported by SAP HANA (SAP Note ${sapnote:-}) (is: ${OS_VERSION})"
            _retval=2
            ;;
        esac

    fi

    # CHECK
    if [[ ${_retval} -eq 99 ]]; then

        local _platform
        local _os_bit_pattern
        local _os_major_version
        local _os_minor_version
        local _os_supported

        _os_major_version=${OS_VERSION%%.*}                             #del minor              12.5 --> 12
        _os_minor_version=${OS_VERSION#*.}                              #del major              12.5 --> 5

        logTrace "<${FUNCNAME[0]}> # Platform  <${LIB_PLATF_VENDOR}> - OS.major <${_os_major_version}>"

        declare -n _sles_matrix="_sles_${_os_major_version}"    # reference bash 4.3.8

        # i+=2 --> every 2nd item
        for ((i=0; i < ${#_sles_matrix[@]}; i+=2)); do

            logTrace "<${FUNCNAME[0]}> # ${_sles_matrix[$i]}>"

            _platform="${_sles_matrix[$i]}"

            [[ "${LIB_PLATF_VENDOR}" != "${_platform}"* ]] && continue

            _os_bit_pattern="${_sles_matrix[$i+1]}"
            _os_supported="${_os_bit_pattern:${_os_minor_version}:1}"
            _os_supported="${_os_supported/-/ff}"                       #replace - by ff=255 to handle 0 correctly

            logTrace "<${FUNCNAME[0]}> # BitPattern <${_os_bit_pattern}> - OS.minor <${_os_minor_version}> - supported? <0x${_os_supported}>"

            if [[ $((0x${_os_supported})) -ne ${_os_minor_version} ]] ; then

                logCheckError "SLES version is NOT supported by SAP HANA (SAP Note ${sapnote:-}) (is: ${OS_VERSION} @ ${LIB_PLATF_VENDOR})"
                _retval=2

            else

                logCheckOk "SLES version is supported by SAP HANA (SAP Note ${sapnote:-}) (is: ${OS_VERSION} @ ${LIB_PLATF_VENDOR})"
                _retval=0

            fi

            break

        done
    fi

    logDebug "<${BASH_SOURCE[0]}:${FUNCNAME[0]}> # RC=${_retval}"
    return ${_retval}

}
